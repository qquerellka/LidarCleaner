version: '3'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: "postgresql://postgres:postgres@db:5432/postgres?sslmode=disable"
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
      MINIO_ENDPOINT: "minio:9000"
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      MINIO_BUCKET_NAME: "${MINIO_BUCKET_NAME}"
    ports:
      - "8000:8000"
    volumes:
      - ./migrations:/app/migrations
    depends_on:
      minio:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - app-network

  cv-worker:
    build:
      context: .
      dockerfile: cv_worker/Dockerfile
    environment:
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
      MINIO_ENDPOINT: "minio:9000"
      MINIO_ROOT_USER: "root"
      MINIO_ROOT_PASSWORD: "minio_password"
      MINIO_BUCKET_NAME: "${MINIO_BUCKET_NAME}"
    depends_on:
      - rabbitmq
      - minio
      - app
    networks:
      - app-network

  minio:
    container_name: minio
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    volumes:
      - 'minio_data:/data'
    ports:
      - "9000:9000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    environment:
#      MINIO_ENDPOINT: "localhost:9000"
      MINIO_ROOT_USER: "root"
      MINIO_ROOT_PASSWORD: "minio_password"
      MINIO_USE_SSL: "${MINIO_USE_SSL}"
      MINIO_DEFAULT_BUCKETS: "${MINIO_BUCKET_NAME}"
#      MINIO_SERVER_URL: "localhost:9000"
    networks:
      - app-network

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # веб-панель
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  minio_data:
  postgres_data:

networks:
  app-network:
    driver: bridge